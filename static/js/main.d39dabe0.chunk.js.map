{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","id","href","title","type","onClick","toggleStyle","htmlFor","text","TextForm","useState","Text","setText","style","color","heading","backgroundColor","onChange","event","target","value","rows","newText","toUpperCase","showAlert","nText","toLowerCase","ctext","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d39dabe0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n  \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\" id=\"mylink\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n         */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-dark\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'? 'dark' : 'light'}`}>\r\n        <input  onClick={props.toggleStyle} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label  className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.text}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Hello \",\r\n  aboutText: \" There\"\r\n\r\n};","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = ()=>{\r\n      let newText = Text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert('Converted to Uppercase', 'success')\r\n\r\n      \r\n  }  \r\n\r\n  const handleLowClick = ()=> {\r\n    let nText = Text.toLowerCase();\r\n      setText(nText);\r\n  }\r\n  const handleCopy = ()=>{\r\n    let ctext = document.getElementById('myBox');\r\n    ctext.select();\r\n    navigator.clipboard.writeText(ctext.value);\r\n  }\r\n\r\n  const handleExtraSpaces = ()=>{\r\n\r\n    let newText = Text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n\r\n  }\r\n\r\n  const handleClearText = ()=>{\r\n    let newText = \"\";\r\n    setText(newText)\r\n  }\r\n  const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n}\r\n\r\n\r\n    \r\n  const [Text, setText] = useState(\"\");\r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color : props.mode === \"light\"? 'black' : ' white'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n         <textarea className=\"form-control\" style={{backgroundColor : props.mode === \"light\"? 'white' : ' white', color : props.mode === \"light\"? 'black' : ' black'}} onChange={handleOnChange} value={Text} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert into Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert into Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra space</button>\r\n    </div>\r\n    <div className=\"container\">\r\n      \r\n    </div>\r\n    <div className=\"container my-3\" style={{color : props.mode === \"light\"? 'black' : ' white'}}>\r\n      <h2>Text Summary</h2>\r\n      <p>{Text.split(' ').length} words and {Text.length} characters</p>\r\n      <p>{0.008 * Text.split(\" \").length} </p>\r\n    </div>\r\n    <div className=\"container\" style={{color : props.mode === \"light\"? 'black' : ' white'}}>\r\n    <h2>Preview</h2>\r\n    <p>{Text}</p>\r\n    \r\n\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg} \r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n  \n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [text, setText] = useState('Enable DarkMode');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n\n    setAlert ( {\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n\n  }\n\n\n  const toggleStyle = ()=>{\n    if(mode === \"light\"){\n\n      setMode('dark')\n      setText('Enable LightMode')\n      document.body.style.backgroundColor = \"#163060\"\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    }\n    else {\n      setMode('light')\n      setText('Enable DarkMode')\n      document.body.style.backgroundColor = \" white\"\n      showAlert(\"Light mode has been enabled\", 'success')\n    }\n  }\n\n\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleStyle={toggleStyle} text={text}/>\n    <Alert alert={alert}  />\n    {/* <Navbar  /> */}\n    <div className=\"container my-4\">\n    {/* <Switch> */}\n          {/* <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter your text below\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch>  */}\n    </div>\n    {/* </Router> */}\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}